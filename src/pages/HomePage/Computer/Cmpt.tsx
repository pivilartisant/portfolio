/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 cmpt.gltf --types
*/

import * as THREE from 'three'
import { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { Group } from 'three'

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh
    Object_3: THREE.Mesh
    Object_4: THREE.Mesh
    Object_5: THREE.Mesh
    Object_6: THREE.Mesh
    Text001: THREE.Mesh
  }
  materials: {
    lambert5SG: THREE.MeshStandardMaterial
    lambert6SG: THREE.MeshStandardMaterial
    initialShadingGroup: THREE.MeshStandardMaterial
    lambert3SG: THREE.MeshStandardMaterial
    lambert4SG: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
  }
}

export function ComputerModel(props: JSX.IntrinsicElements['group']) {

  const ref = useRef<Group>(null!)

  const [Zspeed, setZSpeed] = useState(-0.004)
  useFrame(()=>{
    ref.current.rotation.z += Zspeed
})

  const { nodes, materials } = useGLTF('/cmpt.gltf') as GLTFResult
  return (
    <group 
      {...props} 
      dispose={null} 
      ref={ref} 
      rotation={[Math.PI / -2, 0, Math.PI / -2]}
      onPointerEnter={()=>
        Zspeed >=0 ?  setZSpeed(-0.008) : setZSpeed(0.008)
      }
      >
        <mesh geometry={nodes.Object_2.geometry} material={materials.lambert5SG} position={[0, 0, -0.1]} />
        <mesh geometry={nodes.Object_3.geometry} material={materials.lambert6SG} />
        <mesh geometry={nodes.Object_4.geometry} material={materials.initialShadingGroup} />
        <mesh geometry={nodes.Object_5.geometry} material={materials.lambert3SG} />
        <mesh geometry={nodes.Object_6.geometry} material={materials.lambert4SG} position={[0, 0, -0.1]} />
      <mesh geometry={nodes.Text001.geometry} material={materials['Material.002']} position={[-0.0, -0.10, 1.50]} rotation={[Math.PI, 0, -Math.PI /2]} scale={0.17} />
    </group>
  )
}

useGLTF.preload('/cmpt.gltf')
